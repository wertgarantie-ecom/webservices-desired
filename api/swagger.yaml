openapi: 3.0.0
info:
  description: >
    Dies ist eine Beispiel API, wie wir sie uns auf Seiten der WG Webservices vorstellen würden.


    Das Ziel ist es mehrere Produkt Offerten mit einem Request abrufen zu können. Ein Wertgarantie Produkt kann dabei zu mehreren Produkt Offerten führen. Zum Beispiel kann das Produkt Komplettschutz (für Smartphones) zu den Produkt Offerten "Basic" und "Premium" führen, wobei Premium das Risiko Diebstahlschutz mit einschließt. Eine Offerte besteht also jeweils aus einer bestimmten Produkt Konfiguration.


    Welche Offerten angeboten werden, kann pro Client (Shop) konfiguriert werden.
  version: "1.0.2"
  title: WG Webservices API
  contact:
    email: wertgarantie.bifrost@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /productOffers:
    get:
      summary: Retrieve client's product offers for specific object code (device class)
      operationId: getProductOffers
      parameters:
        - name: objectCodeExternal
          in: query
          description: shop's object code of the insurable product (optional). The mapping could be determined by the session (one mapping per client).
          required: false
          schema:
            type: string
          examples:
            smartphone:
              value: 'smartphone'
        - name: purchasePrice
          in: query
          description: >-
            purchase price in minor units (cent): filters product offers by
            price range
          required: false
          schema:
            type: integer
            format: int64
          examples:
            sample1:
              value: 80000
              summary: "represents 800.00 EUR"
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            default: 2
          required: false
          description: max number of product offers to send back
        - name: session
          in: header
          description: >-
            current session received from auth call (could be mapped to unique
            agent number)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully fetched product offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductOfferResponse'
        '204':
          description: could not find product offers for given request parameters
          content:
            application/json:
              schema:
                type: string
        '400':
          description: invalid request
          content:
            application/json:
              schema:
                type: string
        '401':
          description: unauthorized, no or invalid session id provided
          content:
            application/json:
              schema:
                type: string
  /prodcutOffers/{productOfferId}/insuranceProposal:
    post:
      summary: request to create an insurance proposal for the given product offer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsuranceProposalRequest'
      parameters:
        - in: path
          name: productOfferId
          required: true
          schema:
            type: string
            format: uuid
        - name: session
          in: header
          description: >-
            current session received from auth call (could be mapped to unique
            agent number)
          required: true
          schema:
            type: string
      responses:
        '202':
          description: successfully created insurance proposal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsuranceProposalResponse'
        '400':
          description: invalid request
          content:
            application/json:
              schema:
                type: string
        '401':
          description: unauthorized, no or invalid session id provided
          content:
            application/json:
              schema:
                type: string

components:
  schemas:
    ProductOfferResponse:
      type: object
      properties:
        clientId:
          type: string
          example:
            clientId: "partnershops clientId"
        generalDocuments:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        productOffers:
          type: array
          items:
            $ref: '#/components/schemas/ProductOffer'

    ProductOffer:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          example: "0cec8bba-c66b-4de0-aa92-84f6440a10d3"
        name:
          type: string
          example: "Komplettschutz mit Premium-Option"
        productDocuments:
          type: array
          items:
            $ref: '#/components/schemas/Document'
          example:
            - documentTitle: "GU WG DE KS 0419_PRODUKTINFORMATIONSBLATT.PDF"
              documentType: "IPID"
              documentLink: "https://webservices/documents/GU_WG_DE_KS_0419_PRODUKTINFORMATIONSBLATT.PDF"
        advantages:
          type: array
          items:
            type: string
          example: ["Cyberschutz bei Missbrauch von Online-Accounts und Zahlungsdaten", "Diebstahlschutz", "Keine Selbstbeteiligung im Schadensfall", "Unsachgemäße Handhabung", "Weltweiter Schutz", "Volle Kostenübernahme bei Reparaturen", "..."]
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'

    Document:
      type: object
      properties:
        documentTitle:
          type: string
        documentType:
          type: string
        documentLink:
          type: string
      example:
        - documentTitle: "AVB.PDF"
          documentType: "GTCI"
          documentLink: "https://webservices/documents/GAVB.PDF"

    Device:
      type: object
      properties:
        objectCode:
          type: integer
          format: int64
        objectCodeExternal:
          type: string
        maxPriceLimitation:
          type: integer
          format: int64
        intervals:
          type: array
          items:
            $ref: '#/components/schemas/Interval'
      example:
        objectCode: 9025
        objectCodeExternal: "smartphone"
        maxPriceLimitation: 1800
        intervals:
          intervalCode: 1
          description: "monatlich"
          priceRangePremiums:
            - minClose: 0
              maxOpen: 30000
              insurancePremium: 695
            - minClose: 30000
              maxOpen: 80000
              insurancePremium: 995
            - minClose: 80000
              maxOpen: 180000
              insurancePremium: 1295

    Interval:
      type: object
      properties:
        intervalCode:
          type: integer
          format: int64
        description:
          type: string
        priceRangePremiums:
          type: array
          items:
            $ref: '#/components/schemas/PriceRangePremium'
      example:
        intervalCode: 1
        description: "monatlich"
        priceRangePremiums:
          - minClose: 0
            maxOpen: 30000
            insurancePremium: 500
          - minClose: 30000
            maxOpen: 80000
            insurancePremium: 800

    PriceRangePremium:
      type: object
      properties:
        minClose:
          type: integer
          format: int64
        maxOpen:
          type: integer
          format: int64
        insurancePremium:
          type: integer
          format: int64
      example:
        minClose: 0
        maxOpen: 30000
        insurancePremium: 500

    InsuranceProposalRequest:
      type: object
      properties:
        customer:
          $ref: '#/components/schemas/Customer'
        shopProduct:
          $ref: '#/components/schemas/ShopProduct'
        confirmations:
          $ref: '#/components/schemas/Confirmations'
        payment:
          $ref: '#/components/schemas/Payment'

    Customer:
      type: object
      properties:
        salutation:
          type: string
        title:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        country:
          type: string
        city:
          type: string
        zip:
          type: string
        street:
          type: string
        houseNumber:
          type: string
        email:
          type: string
          format: email
      required:
        - salutation
        - firstname
        - lastname
        - country
        - city
        - zip
        - street
        - houseNumber
        - email

    ShopProduct:
      type: object
      properties:
        model:
          type: string
          example: "iPhone 11"
        externalObjectCode:
          type: string
          example: "Smartphone"
        purchasePrice:
          type: integer
          format: int64
          example: 110000
          description: 'price in minor units (cent)'
        manufacturer:
          type: string
          example: "Apple Inc."

    Confirmations:
      type: object
      properties:
        lockPriceConfirmed:
          type: boolean
          description: 'only required if shop product is bike/e-bike'
        termsAndConditionsAccepted:
          type: boolean
        legalAgeConfirmed:
          type: boolean

    Payment:
      type: object
      properties:
        paymentMethod:
          type: string
          enum: ["bankTransfer"]
          description: 'can be altered by the user later on in the customer portal'


    InsuranceProposalResponse:
      type: object
      properties:
        proposalId:
          type: string
          format: uuid
          description: 'Id that allows the user to check the state of his/her insurance proposal'
